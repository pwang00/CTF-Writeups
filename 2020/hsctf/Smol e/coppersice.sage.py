

# This file was *autogenerated* from the file coppersice.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_60 = Integer(60); _sage_const_0p25 = RealNumber('0.25'); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_163741039289512913448211316444208415089696281156598707546239939060930005300801050041110593445808590019811244791595198691653105173667082682192119631702680644123546329907362913533410257711393278981293987091294252121612050351292239086354120710656815218407878832422193841935690159084860401941224426397820742950923 = Integer(163741039289512913448211316444208415089696281156598707546239939060930005300801050041110593445808590019811244791595198691653105173667082682192119631702680644123546329907362913533410257711393278981293987091294252121612050351292239086354120710656815218407878832422193841935690159084860401941224426397820742950923); _sage_const_110524539798470366613834133888472781069399552085868942087632499354651575111511036068021885688092481936060366815322764760005015342876190750877958695168393505027738910101191528175868547818851667359542590042073677436170569507102025782872063324950368166532649021589734367946954269468844281238141036170008727208883 = Integer(110524539798470366613834133888472781069399552085868942087632499354651575111511036068021885688092481936060366815322764760005015342876190750877958695168393505027738910101191528175868547818851667359542590042073677436170569507102025782872063324950368166532649021589734367946954269468844281238141036170008727208883); _sage_const_42406837735093367941682857892181550522346220427504754988544140886997339709785380303682471368168102002682892652577294324286913907635616629790484019421641636805493203989143298536257296680179745122126655008200829607192191208919525797616523271426092158734972067387818678258432674493723618035248340048171787246777 = Integer(42406837735093367941682857892181550522346220427504754988544140886997339709785380303682471368168102002682892652577294324286913907635616629790484019421641636805493203989143298536257296680179745122126655008200829607192191208919525797616523271426092158734972067387818678258432674493723618035248340048171787246777); _sage_const_100 = Integer(100)
from sage.all import *
import binascii

def coppersmith(C1, C2, e, N, X = _sage_const_2 **_sage_const_60 , b = _sage_const_0p25 ):
    P = PolynomialRing(Zmod(N), names=('x', 'y',)); (x, y,) = P._first_ngens(2)
    P2 = PolynomialRing(Zmod(N), names=('y',)); (y,) = P2._first_ngens(1)
    
    g1 = (x**e - C1).change_ring(P2)
    g2 = ((x + y)**e - C2).change_ring(P2)

    res = g1.resultant(g2, variable=x)

    roots = res.univariate_polynomial().change_ring(Zmod(N))\
        .small_roots(X=X, beta=b)

    return roots[_sage_const_0 ]


def franklin_reiter(c_array, N, r, e=_sage_const_3 ):
    P = PolynomialRing(Zmod(N), names=('x',)); (x,) = P._first_ngens(1)
    c1, c2 = c_array
    equations = [x ** e - c1, (x + r) ** e - c2]
    g1, g2 = equations
    return -composite_gcd(g1,g2).coefficients()[_sage_const_0 ]

def composite_gcd(g1,g2):
    return g1.monic() if g2 == _sage_const_0  else composite_gcd(g2, g1 % g2)

def test():
    N = _sage_const_163741039289512913448211316444208415089696281156598707546239939060930005300801050041110593445808590019811244791595198691653105173667082682192119631702680644123546329907362913533410257711393278981293987091294252121612050351292239086354120710656815218407878832422193841935690159084860401941224426397820742950923 
    C1 = _sage_const_110524539798470366613834133888472781069399552085868942087632499354651575111511036068021885688092481936060366815322764760005015342876190750877958695168393505027738910101191528175868547818851667359542590042073677436170569507102025782872063324950368166532649021589734367946954269468844281238141036170008727208883 
    C2 = _sage_const_42406837735093367941682857892181550522346220427504754988544140886997339709785380303682471368168102002682892652577294324286913907635616629790484019421641636805493203989143298536257296680179745122126655008200829607192191208919525797616523271426092158734972067387818678258432674493723618035248340048171787246777 
    e = _sage_const_3 

    diff = coppersmith(C1, C2, e, N)
    print("Diff: ", diff)
    m1 = franklin_reiter([C1, C2], N, diff)
    print(f"Recovered message: {m1} \n")

    assert pow(m1, e, N) == C1 and pow(m1 + diff, e, N) == C2, "Recovered values are incorrect!"

    for i in range(_sage_const_100 ):
        candidate = binascii.unhexlify(hex(m1 // _sage_const_2 **i)[_sage_const_2 :])
        if b"flag" in candidate:
            print("Message found!\n", candidate)
            break

if __name__ == "__main__":
    test()

