from socket import socket

def lcg_recover():
	x1 = 30096958377823307344276367017724943142170975078802650818143933627150359255661
	x2 = 56531144904142883065234161377668110910856172044580012975940857599903617985286
	x3 = 21507298446547656840016447680790423102532194062582695389690425422459852733173
	x4 = 28318018355030933157280461765454143162860765847090913051394343320457560342418
	q = 66872845102634800095194804323292128799390830238101159557106523891532898612969
	
	a = (x2 - x3) * inverse_mod(x1 - x2, q) % q
	# k = -(a * x1 - x2) % q

	return a, q

def break_schnorr():
	# 3 consecutive signatures
	a, q = lcg_recover()
	s1 = 55050607273829649843374110220932064895049236288913105740752070826027409604815
	e1 = 45091367725206111459410271425165636938443626712829884565641125657569454510832

	s2 = 54791705160577724001003464276848213135459641235327751549543250894403651764097
	e2 = 14376907169561193103819851186898175664798425624149020885136013861087154210472

	s3 = 59739408369370470768375899476530732759814450750589489697354231781544638855150
	e3 = 31493930540551805039179360828058615321360278998652511835119415329918286114209

	# Solving system of congruences
	x = -(a*(s2 - s1) - (s3 - s2)) * inverse_mod(a * (e2 - e1) - (e3 - e2), q) % q
	return x

if __name__ == "__main__":
	x = str(break_schnorr())
	# Connect to server and pwn
	r = socket()
	r.connect(("161.35.232.27", 12345))
	r.recv(4096)
	r.send(b"3\n")
	r.recv(4096)
	r.send(bytes(x, "utf8") + b"\n")
	print(r.recv(4096))
