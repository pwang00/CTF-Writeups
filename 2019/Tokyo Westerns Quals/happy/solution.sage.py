
# This file was *autogenerated* from the file solution.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_25895436290109491245101531425889639027975222438101136560069483392652360882638128551753089068088836092997653443539010850513513345731351755050869585867372758989503310550889044437562615852831901962404615732967948739458458871809980240507942550191679140865230350818204637158480970417486015745968144497190368319745738055768539323638032585508830680271618024843807412695197298088154193030964621282487334463994562290990124211491040392961841681386221639304429670174693151 = Integer(25895436290109491245101531425889639027975222438101136560069483392652360882638128551753089068088836092997653443539010850513513345731351755050869585867372758989503310550889044437562615852831901962404615732967948739458458871809980240507942550191679140865230350818204637158480970417486015745968144497190368319745738055768539323638032585508830680271618024843807412695197298088154193030964621282487334463994562290990124211491040392961841681386221639304429670174693151); _sage_const_65537 = Integer(65537); _sage_const_5452318773620154613572502669913080727339917760196646730652258556145398937256752632887555812737783373177353194432136071770417979324393263857781686277601413222025718171529583036919918011865659343346014570936822522629937049429335236497295742667600448744568785484756006127827416640477334307947919462834229613581880109765730148235236895292544500644206990455843770003104212381715712438639535055758354549980537386992998458659247267900481624843632733660905364361623292713318244751154245275273626636275353542053068704371642619745495065026372136566314951936609049754720223393857083115230045986813313700617859091898623345607326632849260775745046701800076472162843326078037832455202509171395600120638911 = Integer(5452318773620154613572502669913080727339917760196646730652258556145398937256752632887555812737783373177353194432136071770417979324393263857781686277601413222025718171529583036919918011865659343346014570936822522629937049429335236497295742667600448744568785484756006127827416640477334307947919462834229613581880109765730148235236895292544500644206990455843770003104212381715712438639535055758354549980537386992998458659247267900481624843632733660905364361623292713318244751154245275273626636275353542053068704371642619745495065026372136566314951936609049754720223393857083115230045986813313700617859091898623345607326632849260775745046701800076472162843326078037832455202509171395600120638911); _sage_const_16 = Integer(16)
n = _sage_const
cf = _sage_const_25895436290109491245101531425889639027975222438101136560069483392652360882638128551753089068088836092997653443539010850513513345731351755050869585867372758989503310550889044437562615852831901962404615732967948739458458871809980240507942550191679140865230350818204637158480970417486015745968144497190368319745738055768539323638032585508830680271618024843807412695197298088154193030964621282487334463994562290990124211491040392961841681386221639304429670174693151 
e = _sage_const_65537 

c = int(open("flag.enc", "rb").read().encode("hex"), _sage_const_16 )
P = PolynomialRing(Zmod(n), names=('p',)); (p,) = P._first_ngens(1)

f = (cf * p - _sage_const_1 ) * p

# Apply Coppersmith's here

roots = f.monic().small_roots()
print(roots)

# Factor N

p = Integer(roots[_sage_const_1 ])
q = Integer(sqrt(n // p))
d1 = Integer(pow(e, (p - _sage_const_1 ) // _sage_const_2  - _sage_const_2 , p - _sage_const_1 ))
d2 = Integer(pow(e, q - _sage_const_1 , q * (q - _sage_const_1 )))
e1 = Integer(pow(c, d1, p))
e2 = Integer(pow(c, d2, q))
m = e1 + p * ((cf * (e2 - e1)) % q)
print(m)

# Generate key

key = {
"p": p, 
"q": q,
"d1": d1,
"d2": d2,
"cf": cf,
}

print(key)


