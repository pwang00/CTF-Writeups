from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.serialization import load_pem_private_key

from cryptography.hazmat.primitives.asymmetric import padding

n = 5452318773620154613572502669913080727339917760196646730652258556145398937256752632887555812737783373177353194432136071770417979324393263857781686277601413222025718171529583036919918011865659343346014570936822522629937049429335236497295742667600448744568785484756006127827416640477334307947919462834229613581880109765730148235236895292544500644206990455843770003104212381715712438639535055758354549980537386992998458659247267900481624843632733660905364361623292713318244751154245275273626636275353542053068704371642619745495065026372136566314951936609049754720223393857083115230045986813313700617859091898623345607326632849260775745046701800076472162843326078037832455202509171395600120638911
cf = 25895436290109491245101531425889639027975222438101136560069483392652360882638128551753089068088836092997653443539010850513513345731351755050869585867372758989503310550889044437562615852831901962404615732967948739458458871809980240507942550191679140865230350818204637158480970417486015745968144497190368319745738055768539323638032585508830680271618024843807412695197298088154193030964621282487334463994562290990124211491040392961841681386221639304429670174693151
e = 65537

c = open("flag.enc", "r").read()
P.<p> = PolynomialRing(Zmod(n))

f = (cf * p - 1) * p

# Apply Coppersmith's here

roots = f.monic().small_roots()
print(roots)

# Factor N

p = Integer(roots[1])
q = Integer(sqrt(n // p))
phi = (p - 1) * q * (q - 1)
d = inverse_mod(e, phi)
print(d)

key = RSA.construct((long(n), long(e), long(d)))

final_key = load_pem_private_key(
		key.exportKey(),
		password=None, 
		backend=default_backend()
		)

flag = final_key.decrypt(
		c,
		padding.OAEP(
			mgf=padding.MGF1(algorithm=hashes.SHA1()),
			algorithm=hashes.SHA1(),
			label=None
			)
		)
print(flag)
